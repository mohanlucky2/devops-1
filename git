git:

it is version control system

git---global information tracker

git have different statges
 they are 
1.working area
2.staging/indexining area
3.local repository
4.remote repositoy


git init ---->it can genrate the .git directory,it can initialise the git
working area------(git add filename )------------------>staging area
staging area------(git commit -m "commit-1")---------->local repo
local repo-------(git push)--------------------------->remote repo
got log --->it will show the commit history
git status--->it is used to see the status of our file(working area or staging area )
-------------------------------------------------------------------------------------
git branch --->to seev the list of branches

branch is nothing but individual workspace

history:
-------
yum install git 
 git -v
    2  yum install git -y
    3  mkdir git
    4  ls -al
    5  cd git/
    6  git init
    7  ls -al
    8  touch file{1..5}
    9  ls
   10  git status
   11  git add .
   12  git commit -m "commit-1"
   13  git branch
   14  git checkout -b dev
   15  git branch
   16  ls
   17  touch dev{1..5}
   18  git add .
   19  git commit -m "commit-2"
   20  git log
   21  ls
   22  git checkout master
   23  ls
   24  git merge dev
   25  ls
   26  git branch -M main
   27  git branch
   28  git remote add origin https://github.com/mohanlucky2/git.git
   29  git push -u origin main

----------------------------------------------------------------------------
git reset:
----------
1.to remove the changes from staging area
2.to undo the commit at repository level

to remove the changes from staging area
----------------------------------------
touch abc.txt
git add abc.txt
git ls-files --->it will show the files in the staging area
git reset abc.txt--->it will move the file from staging area to working directory

to undo the commit at repository level:
--------------------------------------

git reset <mode> <commit id>
 
moves the HEAD to the specified commit ,and all remaining will recent commits will be removed.

 mode will decide wether these changes are going to remove from staging area and working directory or not

---mixed
---soft
---hard

1.reset with mixed mode:
------------------------
  it is the default mode,to discard commits in the local repository and to discard changes in staging area we should use reset with mixed option,it will not touch working directory
 git reset --mixed commit-id of (n-1)th,then only discard the che changes in local repository and (n)th the commitid similarly if you give (n-2 commitid) it will discard the changes in (n-1)th (n)th commit ids.
 simply we can say that discard the changes in local repo and staging area,now the file available in working directory.
 
git reset --mixed commitid--->it will remove the commit id and staging area changes

3.reset with --soft mode:
-------------------------
   it is exactly same as --mixed option ,but changes are available in working directory as well as in staging area.
it won't touch staging area and working directory

git reset --soft commitid

as changes already present in staging area,just we have to revert back.
3.reset with --hard
--------------------
   it is exactly same as --mixed except that changes will be removed from everywhere(working directory,staging area,local repository)
	it is impossible to revert backand hence while using hard reset we have to take special care

git reset --hard commitid

history:
--------
touch file
  161  vim file
  162  git status
  163  git init
  164  git status
  165  git add .;git commit -m mc1
  166  git log
  167  git ls-files
  168  vim file
  169  git add .;git commit -m mc2
  170  git log --oneline
  171  git checkout -b feature
  172  git branch
  173  ls
  174  cat file
  175  vim file
  176  git add .;git commit -m fc1
  177  git log --oneline feature
  178  git checkout master
  179  ls
  180  cat file
  181  vim file
  182  git add file;git commit -m mc3
  183  git merge feature
  184  vim file
  185  git add file;git commit -m mc
  186  git status
  187  git ls-files
  188  cat file
  189  git config user.name admin
  190  git config user.email admin@gmail.com
  191  git config --list
  192  ls
  193  ls -al
  194  rm -rf file  .git
  195  touch file
  196  vim file
  197  ls -al
  198  git init
  199  git status
  200  git add file
  201  git status
  202  git reset file
  203  git status
  204  git log
  205  git commit -m c1
  206  git add file ;git commit -m c1
  207  git log
  208  vim file
  209  git add file ;git commit -m c2
  210  git log --oneline
  211  git reset --mixed 4454cff
  212  git log --oneline
  213  cat file
  214  git status
  215  git add file ;git commit c2
  216  git add file ;git commit c3
  217  git add file ;git commit -m c2
  218  git log --oneline
  219  git reset --soft 4454cff
  220  git log --oneline
  221  git status
  222  git commit -m c2
  223  git log --oneline
  224  git reset --hard 4454cff
  225  git status
  226  git reset --hard ffacb73
--------------------------------------------------------------------------------------------------------------------
git merge and rebase:
---------------------
in git merge the commit history is available,if we use merge command it will create another commit id 
but in rebase we con't get commit history beacuse it can delete the commits in the other branch and in the place of deletd commits it will create anther commands in the base branch(master) 

practical:
----------
touch a.txt b.txt
git add a.txt;git commit -m "mc1"
git add b.txt;git commit -m "mc2"
git checkout -b feature
touch x.txt y.txt
git add x.txt;git commit -m "fc1"
git add y.txt;git commit -m "fc2"
git log --oneline
git checkout master
touch c.txt 
git add c.txt;git commit -m "mc2"
git log --oneline master
git log --oneline feature
git checkout feature
git rebase master
git log --oneline master
git log --oneline feature
now we can compare the commit id's of feature branch(we can observe commit id's are changed)
git checkout master
git merge feature
git log --oneline --graph --->it will show the list of commits 

we don't use rebase in public repo working with team ,fir personal practice only we can use.
history:
--------
 mkdir git
   23  cd git/
   24  git init
   25  ls -al
   26  touch abc.txt
   27  vi abc.txt 
   28  git commit -a -m c1
   29  git add .
   30  git commit  -m c1
   31  vim abc.txt 
   32  git checkout abc.txt
   33  cat abc.txt 
   34  vim a.txt
   35  git add .;git commit -m "commit-1"
   36  git log --one line
   37  git log --oneline
   38  git checkout -b dev
   39  vim x.txt
   40  git add .; git commit -m d1
   41  vim y.txt
   42  git add .; git commit -m d2
   43  git log --online
   44  git log --oneline
   45  git checkout master
   46  git checkout dev
   47  git rebase master
   48  git -v
   49  mkdir gitpractice
   50  cd gitpractice/
   51  yum install git -y
   52  git init
   53  touch file;git add file;git commit -m "mc1"
   54  sudo -i
   55  git log --oneline
   56  ls
   57  cd gitpractice/
   58  git log --oneline
   59  ls
   60  touch file1;git add file1;git commit -m "mc2"
   61  git log --oneline
   62  git checkout -b feature
   63  git branch
   64  touch a.txt;git add a.txt;git commit -m "fc1"
   65  git log --oneline
   66  touch b.txt;git add b.txt;git commit -m "fc2"
   67  git log --oneline
   68  git checkout master
   69  touch file2;git add b.txt;git commit -m "fc2"
   70  touch file2;git add file2;git commit -m "fc2"
   71  git log --oneline
   72  git checkout feature
   73  git log --oneline
   74  git rebase master
   75  git log --oneline
   76  git branch
   77  git checkout master
   78  git merge feature
   79  ls
   80  git log --oneline
   81  ls
   82  git branch
   83  echo "hello"
   84  echo "hello">>README.md
   85  ls
   86  ls -al
   87   git add README.md
   88  git commit -m "first commit"
   89  git branch
   90   git branch -M main
   91  git branch
   92   git branch -M anil
   93  git branch
   94   git branch -M main
   95  git branch
   96   git remote add origin https://github.com/mohanlucky2/git.git
   97  git remote -v
   98  git remote remove origin
   99  git remote -v
  100   git remote add origin https://github.com/mohanlucky2/git.git
  101  git push -u origin main
  102  git push -u origin feature
  103  git branch
  104  git branch -d feature
  105  git branch
  106  ls
  107  git pull
  108  ls
  109  cat README.md 
  110  git pull
  111  cat README.md 
  112  cd ..
  113  git clone https://github.com/mohanlucky2/jenkins-java-project.git
  114  ls
  115  cd jenkins-java-project/
  116  ls
  117  cd ..
  118  cd git
  119  ls -al
  120  git status
  121  git ls-files
  122  touch c.txt
  123  git status
  124  git ls-files
  125  git add c.txt 
  126  git ls-files
  127  git status
  128  git restore --staged c.txt 
  129  git status
  130  git ls-files

